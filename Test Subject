local function fetchWhitelist()
    local success, whitelistData = pcall(function()
        return loadstring(game:HttpGet("https://raw.githubusercontent.com/N9661/Working-On-Whitelist-System/refs/heads/main/Whitelist"))()
    end)
    
    if not success or not whitelistData then
        return nil
    end
    
    -- Fix any syntax errors in the whitelist data
    local cleanedData = {}
    for i, entry in pairs(whitelistData) do
        if type(entry) == "table" and entry.username and entry.clientId then
            table.insert(cleanedData, entry)
        end
    end
    
    return cleanedData
end

-- Check if the player is in the whitelist
local function isPlayerWhitelisted(whitelist)
    if not whitelist then return false end
    
    local player = game.Players.LocalPlayer
    if not player then return false end
    
    local clientIdBase = game:GetService("RbxAnalyticsService"):GetClientId()
    
    -- Extract the first 3 segments of the client ID (ignoring the last 2 segments)
    local clientIdParts = string.split(clientIdBase, "-")
    local truncatedClientId = ""
    if #clientIdParts >= 3 then
        truncatedClientId = clientIdParts[1] .. "-" .. clientIdParts[2] .. "-" .. clientIdParts[3]
    end
    
    -- Check for exact match with whitelist entries (potential spoofing)
    for _, entry in ipairs(whitelist) do
        if entry.clientId == clientIdBase then
            return false, "Security violation: Using exact whitelist credentials"
        end
    end
    
    -- Check if player is whitelisted
    for _, entry in ipairs(whitelist) do
        -- Extract the first 3 segments of the whitelist entry's client ID
        local entryParts = string.split(entry.clientId or "", "-")
        local entryTruncatedId = ""
        if #entryParts >= 3 then
            entryTruncatedId = entryParts[1] .. "-" .. entryParts[2] .. "-" .. entryParts[3]
        end
        
        -- Check if username matches and the truncated client ID matches
        if string.lower(entry.username) == string.lower(player.Name) and 
           entryTruncatedId == truncatedClientId then
            return true, entry.username
        end
    end
    
    return false, "Not whitelisted"
end

-- Main execution
local whitelist = fetchWhitelist()
if not whitelist then
    game.Players.LocalPlayer:Kick("Failed to load whitelist system. Please try again later.")
    wait(1)
    error("Whitelist system failed to load")
    return
end

local isWhitelisted, whitelistedUsername = isPlayerWhitelisted(whitelist)
if not isWhitelisted then
    game.Players.LocalPlayer:Kick(whitelistedUsername)
    wait(1)
    error("Not whitelisted")
    return
end

-- Set the whitelisted username for the security system to use
_G.WHITELISTED_USERNAME = whitelistedUsername

-- Now load and run your security script
local originalFunctions = {}
local function captureOriginalFunctions()
    originalFunctions.kick = game.Players.LocalPlayer.Kick
    originalFunctions.getNameFromUserIdAsync = game:GetService("Players").GetNameFromUserIdAsync
    originalFunctions.getPlayers = game:GetService("Players").GetPlayers
    
    pcall(function()
        local mt = getrawmetatable(game)
        if mt then
            originalFunctions.index = mt.__index
            originalFunctions.namecall = mt.__namecall
        end
    end)
    
    return originalFunctions
end

local function detectFunctionHooking()
    local hookedFunctions = {}
    
    if originalFunctions.kick ~= game.Players.LocalPlayer.Kick then
        table.insert(hookedFunctions, "Player.Kick")
    end
    
    if originalFunctions.getNameFromUserIdAsync ~= game:GetService("Players").GetNameFromUserIdAsync then
        table.insert(hookedFunctions, "GetNameFromUserIdAsync")
    end
    
    pcall(function()
        local mt = getrawmetatable(game)
        if mt then
            if originalFunctions.index and originalFunctions.index ~= mt.__index then
                table.insert(hookedFunctions, "Metatable.__index")
            end
            if originalFunctions.namecall and originalFunctions.namecall ~= mt.__namecall then
                table.insert(hookedFunctions, "Metatable.__namecall")
            end
        end
    end)
    
    return hookedFunctions
end

local function restoreOriginalFunctions()
    if originalFunctions.kick and originalFunctions.kick ~= game.Players.LocalPlayer.Kick then
        game.Players.LocalPlayer.Kick = originalFunctions.kick
    end
    
    if originalFunctions.getNameFromUserIdAsync and
        originalFunctions.getNameFromUserIdAsync ~= game:GetService("Players").GetNameFromUserIdAsync then
        game:GetService("Players").GetNameFromUserIdAsync = originalFunctions.getNameFromUserIdAsync
    end
    
    pcall(function()
        local mt = getrawmetatable(game)
        if not mt then return end
        
        local success = pcall(function()
            setreadonly(mt, false)
        end)
        
        if not success then return end
        
        if originalFunctions.index and mt.__index ~= originalFunctions.index then
            mt.__index = originalFunctions.index
        end
        
        if originalFunctions.namecall and mt.__namecall ~= originalFunctions.namecall then
            mt.__namecall = originalFunctions.namecall
        end
        
        pcall(function()
            setreadonly(mt, true)
        end)
    end)
end

local function checkForPriorScriptExecution()
    local evidenceFound = {}
    
    local commonGlobals = {
        "_G.ScriptExecuted",
        "_G.Executed",
        "_G.Loaded",
        "_G.ScriptLoaded",
        "_G.Initialized",
        "shared.Executed",
        "shared.ScriptLoaded",
        "_G.OriginalFunctions",
        "_G.OriginalKick",
        "_G.OriginalNamecall",
        "_G.OriginalIndex",
        "_G.HookedFunctions"
    }
    
    for _, globalVar in ipairs(commonGlobals) do
        local success, value = pcall(function()
            local parts = string.split(globalVar, ".")
            local current = _G
            
            if parts[1] == "shared" then
                current = shared
            end
            
            for i = 2, #parts do
                if current and type(current) == "table" then
                    current = current[parts[i]]
                else
                    return nil
                end
            end
            
            return current
        end)
        
        if success and value ~= nil then
            table.insert(evidenceFound, "Found global variable: " .. globalVar)
        end
    end
    
    if _G.ScriptRegistry or (type(shared) == "table" and shared.ScriptRegistry) then
        table.insert(evidenceFound, "Found script registry")
    end
    
    local hookedFunctions = detectFunctionHooking()
    if #hookedFunctions > 0 then
        for _, funcName in ipairs(hookedFunctions) do
            table.insert(evidenceFound, "Function hooked: " .. funcName)
        end
    end
    
    if _G.ScriptFirstRun then
        local timeSinceLastRun = os.time() - _G.ScriptFirstRun
        if timeSinceLastRun < 30 then
            table.insert(evidenceFound, "Suspicious timing: script ran " .. timeSinceLastRun .. " seconds ago")
        end
    else
        _G.ScriptFirstRun = os.time()
    end
    
    return evidenceFound
end

local function getDirectUsernames()
    local results = {}
    
    pcall(function()
        if game.Players.LocalPlayer then
            results[1] = {name = game.Players.LocalPlayer.Name, weight = 1}
        end
    end)
    
    pcall(function()
        if game:GetService("Players").LocalPlayer then
            results[2] = {name = game:GetService("Players").LocalPlayer.Name, weight = 1}
        end
    end)
    
    pcall(function()
        if game.Players.LocalPlayer and game.Players.LocalPlayer.Character then
            results[3] = {name = game.Players.LocalPlayer.Character.Parent.Name, weight = 1}
        end
    end)
    
    local validResults = {}
    for _, result in pairs(results) do
        if result and result.name then
            table.insert(validResults, result)
        end
    end
    
    return validResults
end

local function getUsernameFromId()
    local results = {}
    
    pcall(function()
        local player = game.Players.LocalPlayer
        if not player then return end
        
        local userId = player.UserId
        if not userId then return end
        
        local getNameFunc = originalFunctions.getNameFromUserIdAsync or game:GetService("Players").GetNameFromUserIdAsync
        
        local success, result = pcall(function()
            return getNameFunc(game:GetService("Players"), userId)
        end)
        
        if success and result then
            results[1] = {name = result, weight = 5}
        end
    end)
    
    return results
end

local function getGuiBasedUsername()
    local results = {}
    
    pcall(function()
        if game.Players.LocalPlayer and game.Players.LocalPlayer:FindFirstChild("PlayerGui") then
            local name = game.Players.LocalPlayer.PlayerGui.Parent.Name
            results[1] = {name = name, weight = 1}
        end
    end)
    
    pcall(function()
        local coreGui = game:GetService("CoreGui")
        local playerListGui = coreGui:FindFirstChild("PlayerList")
        if playerListGui then
            for _, item in pairs(playerListGui:GetDescendants()) do
                if item:IsA("TextLabel") and item.Text == game.Players.LocalPlayer.Name then
                    results[2] = {name = item.Text, weight = 1}
                    break
                end
            end
        end
    end)
    
    return results
end

local function getGameSpecificReferences()
    local results = {}
    
    pcall(function()
        if game:GetService("Players").LocalPlayer and game:GetService("Players").LocalPlayer:FindFirstChild("leaderstats") then
            local name = game:GetService("Players").LocalPlayer.leaderstats.Parent.Name
            results[1] = {name = name, weight = 1}
        end
    end)
    
    pcall(function()
        if game:GetService("Players").LocalPlayer and game:GetService("Players").LocalPlayer.Team then
            local getPlayersFunc = originalFunctions.getPlayers or game:GetService("Players").GetPlayers
            
            for _, player in pairs(getPlayersFunc(game:GetService("Players"))) do
                if player.Team == game:GetService("Players").LocalPlayer.Team and
                    player.UserId == game:GetService("Players").LocalPlayer.UserId then
                    results[2] = {name = player.Name, weight = 1}
                    break
                end
            end
        end
    end)
    
    return results
end

local function getNetworkBasedUsername()
    local results = {}
    
    pcall(function()
        if game.Players.LocalPlayer and game.Players.LocalPlayer.Character then
            local part = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if part then
                local networkOwner = part:GetNetworkOwner()
                if networkOwner then
                    results[1] = {name = networkOwner.Name, weight = 2}
                end
            end
        end
    end)
    
    return results
end

local function checkFriendListUsername()
    local results = {}
    
    pcall(function()
        local player = game.Players.LocalPlayer
        if not player then return end
        
        local userId = player.UserId
        if not userId then return end
        
        local success, friendsList = pcall(function()
            return game:GetService("Players"):GetFriendsAsync(userId)
        end)
        
        if success and friendsList then
            local page = friendsList:GetCurrentPage()
            for _, friend in ipairs(page) do
                if friend.Id == userId then
                    results[1] = {name = friend.Username, weight = 2}
                    return
                end
            end
            
            if not friendsList.IsFinished then
                local success, nextPage = pcall(function()
                    return friendsList:GetNextPageAsync()
                end)
                
                if success and nextPage then
                    for _, friend in ipairs(nextPage) do
                        if friend.Id == userId then
                            results[1] = {name = friend.Username, weight = 2}
                            return
                        end
                    end
                end
            end
        end
    end)
    
    return results
end

local function detectEnvironmentTampering()
    local signs = {}
    
    if _G.SpoofedUsername or _G.FakeUsername or
        (type(shared) == "table" and shared.OriginalUsername) then
        table.insert(signs, true)
    end
    
    pcall(function()
        local mt = getrawmetatable(game)
        if mt then
            if originalFunctions.index and originalFunctions.index ~= mt.__index then
                table.insert(signs, true)
            end
            
            if originalFunctions.namecall and originalFunctions.namecall ~= mt.__namecall then
                table.insert(signs, true)
            end
        end
    end)
    
    if originalFunctions.getNameFromUserIdAsync and
        originalFunctions.getNameFromUserIdAsync ~= game:GetService("Players").GetNameFromUserIdAsync then
        table.insert(signs, true)
    end
    
    return #signs > 0
end

local function checkPlayerPropertyConsistency()
    local results = {}
    local inconsistencies = {}
    
    pcall(function()
        local player = game.Players.LocalPlayer
        if not player then return end
        
        local displayName = player.DisplayName
        local name = player.Name
        
        results[1] = {name = name, weight = 1}
        
        if displayName:lower() == _G.WHITELISTED_USERNAME:lower() and
            name:lower() ~= _G.WHITELISTED_USERNAME:lower() then
            table.insert(inconsistencies, true)
        end
    end)
    
    return results, #inconsistencies > 0
end

local function verifyRealUsername()
    local tamperingDetected = detectEnvironmentTampering()
    
    local propertyResults, inconsistencyDetected = checkPlayerPropertyConsistency()
    
    local allResults = {}
    local methodResults = {
        getDirectUsernames(),
        getUsernameFromId(),
        getGuiBasedUsername(),
        getGameSpecificReferences(),
        getNetworkBasedUsername(),
        checkFriendListUsername(),
        propertyResults
    }
    
    for _, results in ipairs(methodResults) do
        for _, result in ipairs(results) do
            if result and result.name then
                table.insert(allResults, result)
            end
        end
    end
    
    local aggregatedResults = {}
    for _, result in ipairs(allResults) do
        local name = result.name:lower()
        if not aggregatedResults[name] then
            aggregatedResults[name] = {
                name = result.name,
                score = 0
            }
        end
        
        aggregatedResults[name].score = aggregatedResults[name].score + result.weight
    end
    
    local highestScore = 0
    local mostLikelyName = nil
    
    for _, data in pairs(aggregatedResults) do
        if data.score > highestScore then
            highestScore = data.score
            mostLikelyName = data.name
        end
    end
    
    local uniqueNames = 0
    for _ in pairs(aggregatedResults) do
        uniqueNames = uniqueNames + 1
    end
    
    local spoofingDetected = uniqueNames > 1 or tamperingDetected or inconsistencyDetected
    
    local claimedName = game.Players.LocalPlayer.Name
    local isSpoofingWhitelistedName = claimedName:lower() == _G.WHITELISTED_USERNAME:lower() and
                                     mostLikelyName and mostLikelyName:lower() ~= _G.WHITELISTED_USERNAME:lower()
    
    return {
        claimedName = claimedName,
        actualUsername = mostLikelyName,
        confidence = highestScore,
        spoofingDetected = spoofingDetected,
        isSpoofingWhitelistedName = isSpoofingWhitelistedName,
        tamperingDetected = tamperingDetected
    }
end

local function secureKick(player, reason)
    local kickFunction = originalFunctions.kick or player.Kick
    
    pcall(function()
        kickFunction(player, reason)
    end)
    
    pcall(function()
        game:Shutdown()
    end)
    
    pcall(function()
        local count = 0
        while count < 1000 do
            count = count + 1
        end
    end)
end

local function checkWhitelist()
    captureOriginalFunctions()
    
    local priorScriptEvidence = checkForPriorScriptExecution()
    local priorScriptDetected = #priorScriptEvidence > 0
    
    if priorScriptDetected then
        restoreOriginalFunctions()
        secureKick(game.Players.LocalPlayer, "Connection interrupted (Error Code: " .. math.random(1000, 9999) .. ")")
        return false
    end
    
    local verification = verifyRealUsername()
    local claimedName = verification.claimedName
    local actualUsername = verification.actualUsername
    
    if not actualUsername then
        restoreOriginalFunctions()
        secureKick(game.Players.LocalPlayer, "Authentication failed (Error Code: " .. math.random(1000, 9999) .. ")")
        return false
    end
    
    if verification.isSpoofingWhitelistedName then
        restoreOriginalFunctions()
        secureKick(game.Players.LocalPlayer, "Security violation (Error Code: " .. math.random(1000, 9999) .. ")")
        return false
    end
    
    if verification.spoofingDetected then
        if actualUsername:lower() == _G.WHITELISTED_USERNAME:lower() then
            return true
        else
            restoreOriginalFunctions()
            secureKick(game.Players.LocalPlayer, "Access denied (Error Code: " .. math.random(1000, 9999) .. ")")
            return false
        end
    else
        if claimedName:lower() == _G.WHITELISTED_USERNAME:lower() then
            return true
        else
            restoreOriginalFunctions()
            secureKick(game.Players.LocalPlayer, "Unauthorized access (Error Code: " .. math.random(1000, 9999) .. ")")
            return false
        end
    end
end

if not _G.__SecuritySystemInitialized then
    _G.__SecuritySystemInitialized = true
    
    local hasAccess = checkWhitelist()
    
    if hasAccess then
        local player = game.Players.LocalPlayer
        print("World")
        
        -- Your main script code goes here after whitelist verification
        
    else
        wait(math.random(1, 3))
        error("Script initialization failed: Error code 0x" .. string.format("%x", math.random(1000, 9999)))
    end
else
    restoreOriginalFunctions()
    secureKick(game.Players.LocalPlayer, "Multiple execution detected (Error Code: " .. math.random(1000, 9999) .. ")")
end
